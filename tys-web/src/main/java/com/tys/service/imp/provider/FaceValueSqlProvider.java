package com.tys.service.imp.provider;

import com.tys.entity.vo.DetectScoreVo;
import com.tys.entity.vo.FaceValue;
import org.apache.ibatis.jdbc.SQL;

public class FaceValueSqlProvider {


    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table facevalue
     *
     * @mbg.generated Wed Mar 06 10:48:30 CST 2019
     */
    public String insertSelective(FaceValue record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("facevalue");
        
        if (record.getSex() != null) {
            sql.VALUES("sex", "#{sex,jdbcType=TINYINT}");
        }
        
        if (record.getTestItems() != null) {
            sql.VALUES("test_items", "#{testItems,jdbcType=TINYINT}");
        }
        
        if (record.getTestResults() != null) {
            sql.VALUES("test_results", "#{testResults,jdbcType=TINYINT}");
        }
        
        if (record.getFaceValue() != null) {
            sql.VALUES("face_value", "#{faceValue,jdbcType=VARCHAR}");
        }
        
        return sql.toString();
    }


    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table facevalue
     *
     * @mbg.generated Wed Mar 06 10:48:30 CST 2019
     */
    public String updateByPrimaryKeySelective(FaceValue record) {
        SQL sql = new SQL();
        sql.UPDATE("facevalue");
        
        if (record.getSex() != null) {
            sql.SET("sex = #{sex,jdbcType=TINYINT}");
        }
        
        if (record.getTestItems() != null) {
            sql.SET("test_items = #{testItems,jdbcType=TINYINT}");
        }
        
        if (record.getTestResults() != null) {
            sql.SET("test_results = #{testResults,jdbcType=TINYINT}");
        }
        
        if (record.getFaceValue() != null) {
            sql.SET("face_value = #{faceValue,jdbcType=VARCHAR}");
        }
        
        sql.WHERE("id = #{id,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    public String querySelective(FaceValue record){
        return new SQL(){
            {
                SELECT("id, sex, test_items, test_results, face_value");
                FROM("facevalue");
                WHERE("status = 1");
                if(record.getFaceValue() != null){
                    WHERE("face_value like concat('%',#{faceValue,jdbcType=VARCHAR},'%')");
                }
                if(record.getSex() != null){
                    WHERE("sex = #{sex,jdbcType=TINYINT}");
                }
                if(record.getTestItems() != null){
                    WHERE("test_items = #{testItems,jdbcType=TINYINT}");
                }
                if(record.getTestResults() != null){
                    WHERE("test_results = #{testResults,jdbcType=TINYINT}");
                }
                ORDER_BY("id");
            }
        }.toString();
    }

    public String selectFaceValueBySorce(Byte sex, DetectScoreVo scoreVo){
        StringBuffer sql =  new StringBuffer("select id, sex, test_items, test_results, face_value from facevalue where status = 1 and sex = "+sex);
        sql.append(" and (");
        boolean began = false;
        if(scoreVo.getAxunge() != null){
            double axunge = scoreVo.getAxunge();
            began = true;
            sql.append(" ( test_items = 1 and ");
            if( axunge < 0.1){
                sql.append("test_results = 1");
            }else if(axunge >=0.1 && axunge < 0.4){
                sql.append("test_results = 2");
            }else {
                sql.append("test_results = 3");
            }
            sql.append(")");
        }
        if(scoreVo.getWrinkle() != null){
            double wrinkle = scoreVo.getWrinkle();
            if(!began){
                began = true;
            }else {
                sql.append(" or ");
            }
            sql.append("(test_items = 2  and ");
            if( wrinkle < 0.1){
                sql.append("test_results = 1");
            }else if(wrinkle >=0.1 && wrinkle <0.4){
                sql.append("test_results = 2");
            }else {
                sql.append("test_results = 3");
            }
            sql.append(")");
        }
        if(scoreVo.getFleck() != null){
            double fleck = scoreVo.getFleck();
            if(!began){
                began = true;
            }else {
                sql.append(" or ");
            }
            sql.append("(test_items = 3  and ");
            if( fleck < 0.1){
                sql.append("test_results = 1");
            }else if(fleck >=0.1 && fleck <0.4){
                sql.append("test_results = 2");
            }else {
                sql.append("test_results = 3");
            }
            sql.append(")");
        }
        if(scoreVo.getPore() != null){
            double proe = scoreVo.getPore();
            if(!began){
                began = true;
            }else {
                sql.append(" or ");
            }
            sql.append("(test_items = 4  and ");
            if( proe < 0.1){
                sql.append("test_results = 1");
            }else if(proe >=0.1 && proe <0.2){
                sql.append("test_results = 2");
            }else {
                sql.append("test_results = 3");
            }
            sql.append(")");
        }
        if(scoreVo.getAcne() != null){
            double acne = scoreVo.getAcne();
            if(!began){
                began = true;
            }else {
                sql.append(" or ");
            }
            sql.append("(test_items = 5 and ");
            if( acne < 0.03){
                sql.append("test_results = 1");
            }else if(acne >=0.03 && acne <0.1){
                sql.append("test_results = 2");
            }else {
                sql.append("test_results = 3");
            }
            sql.append(")");
        }
        sql.append(")");
        return sql.toString();
    }

}